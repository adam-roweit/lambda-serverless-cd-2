AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  api-gateway-test

  Sample SAM Template for api-gateway-test
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  DomainName:
    Type: String
    Default: api.esource.roweitdev.co.uk
    Description: Domain name to call the api from.
  WildcardDomainName:
    Type: String
    Default: '*.esource.roweitdev.co.uk'
    Description: Used to provide the certificate to validate all api domains.
  HostedZoneName:
    Type: String
    Default: esource.roweitdev.co.uk.
    Description: Name of the desired hosted zone.
  HostedZoneId:
    Type: String
    Default: Z3H3DJ5LAUWBA6
    Description: Hosted zone id of the desired hosted zone.
  ApiBasePath:
    Type: String
    Default: v1
    Description: Base path of the api. 'v1' - example.co.uk/v1/endpoints

Resources:
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
  
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '0.1'
          title: ESOURCE Sample Response API
        schemes:
          - https
        paths:
          /users:
            get:
              description: Gets full list of users
              produces:
                - application/json
              responses:
                '200':
                  description: The request was successful.
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/User'
              x-amazon-apigateway-integration:
                uri: 
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          '/users/{id}':
            get:
              description: Gets a specific user
              produces:
                - application/json
              parameters:
                - name: id
                  in: path
                  required: true
                  type: string
              responses:
                '200':
                  description: The request was successful.
                  schema:
                    items:
                      $ref: '#/definitions/User'
              x-amazon-apigateway-integration:
                uri: 
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        definitions:
          User:
            type: object
            description: A generic user
            properties:
              id:
                type: number
                description: ID of the user
              name:
                type: string
                description: Name of the user
            required:
              - tip


  GetUsersLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestApi
    - GetUsersFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUsersFunction
      Principal: apigateway.amazonaws.com

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WildcardDomainName
      DomainValidationOptions:
        - DomainName: !Ref WildcardDomainName
          ValidationDomain: !Ref WildcardDomainName
      ValidationMethod: 'DNS'

  GatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref Certificate
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types: [REGIONAL]

  APIBasePathMapping:
    DependsOn: [ServerlessRestApi]
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref GatewayDomain
      RestApiId: !Ref ServerlessRestApi
      Stage: dev
      BasePath: !Ref ApiBasePath

  APIDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          DNSName: !GetAtt GatewayDomain.RegionalDomainName
          HostedZoneId: !GetAtt GatewayDomain.RegionalHostedZoneId